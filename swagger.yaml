openapi: 3.0.0
info:
  title: G2G
  version: 1.0.0
  description: API documentation for Product, Offer, Order, and Service modules.

servers:
  - url: http://localhost:5000/api

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        type:
          type: string
        productRequiredFields:
          type: array
          items:
            type: object
        additionalFields:
          type: array
          items:
            type: object
        service:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string

    Offer:
      type: object
      properties:
        _id:
          type: string
        product:
          type: string
        seller:
          type: string
        offerDetails:
          type: array
          items:
            type: object
        price:
          type: number
        currency:
          type: string
        quantityAvailable:
          type: number
        deliveryTime:
          type: string
        instantDelivery:
          type: boolean
        status:
          type: string
        images:
          type: array
          items:
            type: string

    Order:
      type: object
      properties:
        _id:
          type: string
        buyerId:
          type: string
        sellerId:
          type: string
        productId:
          type: string
        amount:
          type: number
        quantity:
          type: number
        status:
          type: string
        createdAt:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        icon:
          type: string
      components:

    ServiceInput:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string

    ServiceResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        icon:
          type: string
    Message:
      type: object
      properties:
        user:
          type: string
          enum: [user1, user2]
        text:
          type: string
        read:
          type: boolean
        timestamp:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        _id:
          type: string
        participants:
          type: object
          properties:
            user1:
              type: string
            user2:
              type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ConversationSummary:
      type: object
      properties:
        userId:
          type: string
          description: The other user's ID
        displayName:
          type: string
          description: The other user's display name
        unreadCount:
          type: integer
          description: Number of unread messages in the conversation
        lastMessage:
          type: string
          description: The text content of the last message
        timestamp:
          type: string
          format: date-time
          description: When the last message was sent
    
    CredentialInput:
      type: object
      required:
        - offerId
        - label
        - value
      properties:
        offerId:
          type: string
        orderId:
          type: string
        label:
          type: string
        value:
          type: string
          description: Plain text value that will be encrypted

    CredentialResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            _id:
              type: string
            offerId:
              type: string
            orderId:
              type: string
            label:
              type: string
            value:
              type: string
              description: Encrypted value
            isDelivered:
              type: boolean
            isDeletedFromSellerView:
              type: boolean

paths:
  /products:
    post:
      tags:
        - Product
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Created
    get:
      tags:
        - Product
      summary: Get all products
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /api/products/{productId}:
    get:
      tags:
        - Product
      summary: Get a product by ID
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found

    put:
      tags:
        - Product
      summary: Update a product by ID
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: Product updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found

    delete:
      tags:
        - Product
      summary: Delete a product by ID
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product deleted
        404:
          description: Product not found

  /api/products/service/{serviceId}:
    get:
      tags:
        - Product
      summary: Get products by service ID
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Filtered products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    title:
                      type: string
        400:
          description: Invalid service ID
  /api/home:
    get:
      tags:
        - Admin
      summary: Get home page data with services and their products
      description: Returns all services marked for homepage display along with up to 8 associated products and the offer count for each product.
      responses:
        '200':
          description: Home page services and products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        icon:
                          type: string
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              title:
                                type: string
                              images:
                                type: array
                                items:
                                  type: string
                              offerCount:
                                type: number
        '500':
          description: Server error
 
  /api/services/select:
    post:
      tags:
        - Admin
      summary: Toggle home page visibility for a service
      description: Allows admin to show or hide a service on the homepage using the `showOnHome` flag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
                - show
              properties:
                serviceId:
                  type: string
                  description: The ID of the service to update
                show:
                  type: boolean
                  description: true to show on home, false to hide
      responses:
        '200':
          description: Visibility updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Visibility updated
                  data:
                    $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
        '500':
          description: Server error


  /offers:
    post:
      summary: Create an offer
      tags:
        - Offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "201":
          description: Offer created successfully
        "400":
          description: Validation error

  /api/offers:
    get:
      summary: Get all offers
      tags:
        - Offer
      responses:
        "200":
          description: List of offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"

     

  /offers/{id}:
    get:
      summary: Get an offer by ID
      tags:
        - Offer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Offer retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
        "404":
          description: Offer not found

    put:
      summary: Update an offer
      tags:
        - Offer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "200":
          description: Offer updated successfully
        "400":
          description: Validation error
        "404":
          description: Offer not found

    delete:
      summary: Delete an offer
      tags:
        - Offer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Offer deleted successfully
        "404":
          description: Offer not found
  /api/offers/filter:
    get:
      tags:
        - Offer
      summary: Get offers by product and service ID with related services
      description: List of offers and related services with offer count
      parameters:
        - name: productId
          in: query
          required: true
          description: ID of the product
          schema:
            type: string
        - name: serviceId
          in: query
          required: true
          description: ID of the service
          schema:
            type: string
      responses:
        '200':
          description: Offers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Offer'
                services:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      icon:
                        type: string
                      offerCount:
                        type: integer

        '400':
          description: Missing productId or serviceId
        '404':
          description: Product not found under the specified service
        '500':
          description: Server error

  /api/offers/seller/{sellerId}:
    get:
      tags:
        - Offer
      summary: Get all offers by seller ID
      description: Retrieves all offers made by a specific seller, including nested product and service information.
      parameters:
        - name: sellerId
          in: path
          required: true
          description: ID of the seller
          schema:
            type: string
      responses:
        '200':
          description: Offers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfferWithProductAndService'
        '400':
          description: Seller ID is required
        '500':
          description: Server error


  /api/offers/by-service/{serviceId}:
    get:
      summary: Get all offers by service ID
      description: Returns all offers associated with a given service ID. Supports optional pagination.
      tags:
        - Offer
      parameters:
        - name: serviceId
          in: path
          required: true
          description: ID of the service
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number for pagination (optional)
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          description: Number of items per page (optional)
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: A list of offers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Offer"
        "400":
          description: Invalid service ID or bad request
        "500":
          description: Server error

  /orders:
    post:
      summary: Create an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
                quantity:
                  type: number
      responses:
        "200":
          description: Created

  /api/orders:
    get:
      summary: Get all orders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /services:
    post:
      tags:
        - Service
      summary: Create a service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: Created
  /api/services:
    get:
      tags:
        - Service
      summary: Get all services
      responses:
        200:
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceResponse"

  /api/services/{serviceId}:
    get:
      tags:
        - Service
      summary: Get a service by ID
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Service found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponse"
        404:
          description: Service not found

    put:
      tags:
        - Service
      summary: Update a service by ID
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceInput"
      responses:
        200:
          description: Service updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponse"
        404:
          description: Service not found

    delete:
      tags:
        - Service
      summary: Delete a service by ID
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Service deleted
        404:
          description: Service not found
  /api/conversations/between/{userId1}/{userId2}:
    get:
      summary: Get conversation between two users
      tags:
        - Conversations
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId1
          required: true
          schema:
            type: string
          description: First user's ID
        - in: path
          name: userId2
          required: true
          schema:
            type: string
          description: Second user's ID
      responses:
        "200":
          description: Conversation between two users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "401":
          description: Unauthorized
        "404":
          description: Conversation not found
  /api/conversations/user/{userId}:
    get:
      summary: Get conversation summaries for a user
      tags:
        - Conversations
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the logged-in user
      responses:
        "200":
          description: List of conversation summaries with other users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConversationSummary"
        "401":
          description: Unauthorized

  /api/credentials/create-credential:
    post:
      summary: Create a new credential
      tags:
        - Credentials
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialInput'
      responses:
        '200':
          description: Credential created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialResponse'
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized

  /api/credentials/delete-credential/{id}:
    delete:
      summary: Delete a credential by ID
      tags:
        - Credentials
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Credential ID to delete
      responses:
        '200':
          description: Credential deleted
        '401':
          description: Unauthorized
        '404':
          description: Credential not found

  /api/credentials/get-credential/{id}:
    get:
      summary: Get (decrypted) credential value by ID
      tags:
        - Credentials
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Credential ID
      responses:
        '200':
          description: Decrypted credential value
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: string
                    description: Decrypted value
        '401':
          description: Unauthorized
        '404':
          description: Credential not found
